// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Cat is an object representing the database table.
type Cat struct {
	ID                int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TypeID            int       `boil:"type_id" json:"type_id" toml:"type_id" yaml:"type_id"`
	CurrentActivityID int       `boil:"current_activity_id" json:"current_activity_id" toml:"current_activity_id" yaml:"current_activity_id"`
	OwnerID           int       `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	Hunger            int       `boil:"hunger" json:"hunger" toml:"hunger" yaml:"hunger"`
	WantsHam          bool      `boil:"wants_ham" json:"wants_ham" toml:"wants_ham" yaml:"wants_ham"`
	LastFed           time.Time `boil:"last_fed" json:"last_fed" toml:"last_fed" yaml:"last_fed"`
	LastHam           time.Time `boil:"last_ham" json:"last_ham" toml:"last_ham" yaml:"last_ham"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt         null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *catR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L catL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CatColumns = struct {
	ID                string
	TypeID            string
	CurrentActivityID string
	OwnerID           string
	Hunger            string
	WantsHam          string
	LastFed           string
	LastHam           string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	ID:                "id",
	TypeID:            "type_id",
	CurrentActivityID: "current_activity_id",
	OwnerID:           "owner_id",
	Hunger:            "hunger",
	WantsHam:          "wants_ham",
	LastFed:           "last_fed",
	LastHam:           "last_ham",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var CatWhere = struct {
	ID                whereHelperint
	TypeID            whereHelperint
	CurrentActivityID whereHelperint
	OwnerID           whereHelperint
	Hunger            whereHelperint
	WantsHam          whereHelperbool
	LastFed           whereHelpertime_Time
	LastHam           whereHelpertime_Time
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	DeletedAt         whereHelpernull_Time
}{
	ID:                whereHelperint{field: "\"cats\".\"id\""},
	TypeID:            whereHelperint{field: "\"cats\".\"type_id\""},
	CurrentActivityID: whereHelperint{field: "\"cats\".\"current_activity_id\""},
	OwnerID:           whereHelperint{field: "\"cats\".\"owner_id\""},
	Hunger:            whereHelperint{field: "\"cats\".\"hunger\""},
	WantsHam:          whereHelperbool{field: "\"cats\".\"wants_ham\""},
	LastFed:           whereHelpertime_Time{field: "\"cats\".\"last_fed\""},
	LastHam:           whereHelpertime_Time{field: "\"cats\".\"last_ham\""},
	CreatedAt:         whereHelpertime_Time{field: "\"cats\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"cats\".\"updated_at\""},
	DeletedAt:         whereHelpernull_Time{field: "\"cats\".\"deleted_at\""},
}

// CatRels is where relationship names are stored.
var CatRels = struct {
	CurrentActivity string
	Type            string
	Owner           string
}{
	CurrentActivity: "CurrentActivity",
	Type:            "Type",
	Owner:           "Owner",
}

// catR is where relationships are stored.
type catR struct {
	CurrentActivity *CatActivity `boil:"CurrentActivity" json:"CurrentActivity" toml:"CurrentActivity" yaml:"CurrentActivity"`
	Type            *CatType     `boil:"Type" json:"Type" toml:"Type" yaml:"Type"`
	Owner           *User        `boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
}

// NewStruct creates a new relationship struct
func (*catR) NewStruct() *catR {
	return &catR{}
}

// catL is where Load methods for each relationship are stored.
type catL struct{}

var (
	catAllColumns            = []string{"id", "type_id", "current_activity_id", "owner_id", "hunger", "wants_ham", "last_fed", "last_ham", "created_at", "updated_at", "deleted_at"}
	catColumnsWithoutDefault = []string{"type_id", "current_activity_id", "owner_id", "created_at", "updated_at", "deleted_at"}
	catColumnsWithDefault    = []string{"id", "hunger", "wants_ham", "last_fed", "last_ham"}
	catPrimaryKeyColumns     = []string{"id"}
)

type (
	// CatSlice is an alias for a slice of pointers to Cat.
	// This should generally be used opposed to []Cat.
	CatSlice []*Cat
	// CatHook is the signature for custom Cat hook methods
	CatHook func(context.Context, boil.ContextExecutor, *Cat) error

	catQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	catType                 = reflect.TypeOf(&Cat{})
	catMapping              = queries.MakeStructMapping(catType)
	catPrimaryKeyMapping, _ = queries.BindMapping(catType, catMapping, catPrimaryKeyColumns)
	catInsertCacheMut       sync.RWMutex
	catInsertCache          = make(map[string]insertCache)
	catUpdateCacheMut       sync.RWMutex
	catUpdateCache          = make(map[string]updateCache)
	catUpsertCacheMut       sync.RWMutex
	catUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var catBeforeInsertHooks []CatHook
var catBeforeUpdateHooks []CatHook
var catBeforeDeleteHooks []CatHook
var catBeforeUpsertHooks []CatHook

var catAfterInsertHooks []CatHook
var catAfterSelectHooks []CatHook
var catAfterUpdateHooks []CatHook
var catAfterDeleteHooks []CatHook
var catAfterUpsertHooks []CatHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Cat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Cat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Cat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Cat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Cat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Cat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Cat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Cat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Cat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCatHook registers your hook function for all future operations.
func AddCatHook(hookPoint boil.HookPoint, catHook CatHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		catBeforeInsertHooks = append(catBeforeInsertHooks, catHook)
	case boil.BeforeUpdateHook:
		catBeforeUpdateHooks = append(catBeforeUpdateHooks, catHook)
	case boil.BeforeDeleteHook:
		catBeforeDeleteHooks = append(catBeforeDeleteHooks, catHook)
	case boil.BeforeUpsertHook:
		catBeforeUpsertHooks = append(catBeforeUpsertHooks, catHook)
	case boil.AfterInsertHook:
		catAfterInsertHooks = append(catAfterInsertHooks, catHook)
	case boil.AfterSelectHook:
		catAfterSelectHooks = append(catAfterSelectHooks, catHook)
	case boil.AfterUpdateHook:
		catAfterUpdateHooks = append(catAfterUpdateHooks, catHook)
	case boil.AfterDeleteHook:
		catAfterDeleteHooks = append(catAfterDeleteHooks, catHook)
	case boil.AfterUpsertHook:
		catAfterUpsertHooks = append(catAfterUpsertHooks, catHook)
	}
}

// One returns a single cat record from the query.
func (q catQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Cat, error) {
	o := &Cat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Cat records from the query.
func (q catQuery) All(ctx context.Context, exec boil.ContextExecutor) (CatSlice, error) {
	var o []*Cat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Cat slice")
	}

	if len(catAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Cat records in the query.
func (q catQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q catQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cats exists")
	}

	return count > 0, nil
}

// CurrentActivity pointed to by the foreign key.
func (o *Cat) CurrentActivity(mods ...qm.QueryMod) catActivityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CurrentActivityID),
	}

	queryMods = append(queryMods, mods...)

	query := CatActivities(queryMods...)
	queries.SetFrom(query.Query, "\"cat_activities\"")

	return query
}

// Type pointed to by the foreign key.
func (o *Cat) Type(mods ...qm.QueryMod) catTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TypeID),
	}

	queryMods = append(queryMods, mods...)

	query := CatTypes(queryMods...)
	queries.SetFrom(query.Query, "\"cat_types\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *Cat) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadCurrentActivity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (catL) LoadCurrentActivity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCat interface{}, mods queries.Applicator) error {
	var slice []*Cat
	var object *Cat

	if singular {
		object = maybeCat.(*Cat)
	} else {
		slice = *maybeCat.(*[]*Cat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &catR{}
		}
		args = append(args, object.CurrentActivityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &catR{}
			}

			for _, a := range args {
				if a == obj.CurrentActivityID {
					continue Outer
				}
			}

			args = append(args, obj.CurrentActivityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cat_activities`),
		qm.WhereIn(`cat_activities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CatActivity")
	}

	var resultSlice []*CatActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CatActivity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cat_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cat_activities")
	}

	if len(catAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CurrentActivity = foreign
		if foreign.R == nil {
			foreign.R = &catActivityR{}
		}
		foreign.R.CurrentActivityCats = append(foreign.R.CurrentActivityCats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CurrentActivityID == foreign.ID {
				local.R.CurrentActivity = foreign
				if foreign.R == nil {
					foreign.R = &catActivityR{}
				}
				foreign.R.CurrentActivityCats = append(foreign.R.CurrentActivityCats, local)
				break
			}
		}
	}

	return nil
}

// LoadType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (catL) LoadType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCat interface{}, mods queries.Applicator) error {
	var slice []*Cat
	var object *Cat

	if singular {
		object = maybeCat.(*Cat)
	} else {
		slice = *maybeCat.(*[]*Cat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &catR{}
		}
		args = append(args, object.TypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &catR{}
			}

			for _, a := range args {
				if a == obj.TypeID {
					continue Outer
				}
			}

			args = append(args, obj.TypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cat_types`),
		qm.WhereIn(`cat_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CatType")
	}

	var resultSlice []*CatType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CatType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cat_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cat_types")
	}

	if len(catAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Type = foreign
		if foreign.R == nil {
			foreign.R = &catTypeR{}
		}
		foreign.R.TypeCats = append(foreign.R.TypeCats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TypeID == foreign.ID {
				local.R.Type = foreign
				if foreign.R == nil {
					foreign.R = &catTypeR{}
				}
				foreign.R.TypeCats = append(foreign.R.TypeCats, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (catL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCat interface{}, mods queries.Applicator) error {
	var slice []*Cat
	var object *Cat

	if singular {
		object = maybeCat.(*Cat)
	} else {
		slice = *maybeCat.(*[]*Cat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &catR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &catR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(catAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerCat = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerCat = local
				break
			}
		}
	}

	return nil
}

// SetCurrentActivity of the cat to the related item.
// Sets o.R.CurrentActivity to related.
// Adds o to related.R.CurrentActivityCats.
func (o *Cat) SetCurrentActivity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CatActivity) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"current_activity_id"}),
		strmangle.WhereClause("\"", "\"", 2, catPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CurrentActivityID = related.ID
	if o.R == nil {
		o.R = &catR{
			CurrentActivity: related,
		}
	} else {
		o.R.CurrentActivity = related
	}

	if related.R == nil {
		related.R = &catActivityR{
			CurrentActivityCats: CatSlice{o},
		}
	} else {
		related.R.CurrentActivityCats = append(related.R.CurrentActivityCats, o)
	}

	return nil
}

// SetType of the cat to the related item.
// Sets o.R.Type to related.
// Adds o to related.R.TypeCats.
func (o *Cat) SetType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CatType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"type_id"}),
		strmangle.WhereClause("\"", "\"", 2, catPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TypeID = related.ID
	if o.R == nil {
		o.R = &catR{
			Type: related,
		}
	} else {
		o.R.Type = related
	}

	if related.R == nil {
		related.R = &catTypeR{
			TypeCats: CatSlice{o},
		}
	} else {
		related.R.TypeCats = append(related.R.TypeCats, o)
	}

	return nil
}

// SetOwner of the cat to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerCat.
func (o *Cat) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, catPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &catR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerCat: o,
		}
	} else {
		related.R.OwnerCat = o
	}

	return nil
}

// Cats retrieves all the records using an executor.
func Cats(mods ...qm.QueryMod) catQuery {
	mods = append(mods, qm.From("\"cats\""))
	return catQuery{NewQuery(mods...)}
}

// FindCat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCat(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Cat, error) {
	catObj := &Cat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cats\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, catObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cats")
	}

	return catObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Cat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cats provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(catColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	catInsertCacheMut.RLock()
	cache, cached := catInsertCache[key]
	catInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			catAllColumns,
			catColumnsWithDefault,
			catColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(catType, catMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(catType, catMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cats")
	}

	if !cached {
		catInsertCacheMut.Lock()
		catInsertCache[key] = cache
		catInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Cat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Cat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	catUpdateCacheMut.RLock()
	cache, cached := catUpdateCache[key]
	catUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			catAllColumns,
			catPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, catPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(catType, catMapping, append(wl, catPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cats")
	}

	if !cached {
		catUpdateCacheMut.Lock()
		catUpdateCache[key] = cache
		catUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q catQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, catPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Cat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cats provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(catColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	catUpsertCacheMut.RLock()
	cache, cached := catUpsertCache[key]
	catUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			catAllColumns,
			catColumnsWithDefault,
			catColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			catAllColumns,
			catPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cats, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(catPrimaryKeyColumns))
			copy(conflict, catPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cats\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(catType, catMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(catType, catMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cats")
	}

	if !cached {
		catUpsertCacheMut.Lock()
		catUpsertCache[key] = cache
		catUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Cat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Cat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Cat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), catPrimaryKeyMapping)
	sql := "DELETE FROM \"cats\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q catQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no catQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(catBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, catPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cats")
	}

	if len(catAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Cat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCat(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cats\".* FROM \"cats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, catPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CatSlice")
	}

	*o = slice

	return nil
}

// CatExists checks if the Cat row exists.
func CatExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cats\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cats exists")
	}

	return exists, nil
}
