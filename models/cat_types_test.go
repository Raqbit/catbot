// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCatTypes(t *testing.T) {
	t.Parallel()

	query := CatTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCatTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CatTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCatTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CatTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CatTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCatTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CatTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CatTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCatTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CatTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CatType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CatTypeExists to return true, but got false.")
	}
}

func testCatTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	catTypeFound, err := FindCatType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if catTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCatTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CatTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCatTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CatTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCatTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	catTypeOne := &CatType{}
	catTypeTwo := &CatType{}
	if err = randomize.Struct(seed, catTypeOne, catTypeDBTypes, false, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}
	if err = randomize.Struct(seed, catTypeTwo, catTypeDBTypes, false, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = catTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = catTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CatTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCatTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	catTypeOne := &CatType{}
	catTypeTwo := &CatType{}
	if err = randomize.Struct(seed, catTypeOne, catTypeDBTypes, false, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}
	if err = randomize.Struct(seed, catTypeTwo, catTypeDBTypes, false, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = catTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = catTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CatTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func catTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CatType) error {
	*o = CatType{}
	return nil
}

func catTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CatType) error {
	*o = CatType{}
	return nil
}

func catTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CatType) error {
	*o = CatType{}
	return nil
}

func catTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CatType) error {
	*o = CatType{}
	return nil
}

func catTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CatType) error {
	*o = CatType{}
	return nil
}

func catTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CatType) error {
	*o = CatType{}
	return nil
}

func catTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CatType) error {
	*o = CatType{}
	return nil
}

func catTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CatType) error {
	*o = CatType{}
	return nil
}

func catTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CatType) error {
	*o = CatType{}
	return nil
}

func testCatTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CatType{}
	o := &CatType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, catTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CatType object: %s", err)
	}

	AddCatTypeHook(boil.BeforeInsertHook, catTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	catTypeBeforeInsertHooks = []CatTypeHook{}

	AddCatTypeHook(boil.AfterInsertHook, catTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	catTypeAfterInsertHooks = []CatTypeHook{}

	AddCatTypeHook(boil.AfterSelectHook, catTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	catTypeAfterSelectHooks = []CatTypeHook{}

	AddCatTypeHook(boil.BeforeUpdateHook, catTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	catTypeBeforeUpdateHooks = []CatTypeHook{}

	AddCatTypeHook(boil.AfterUpdateHook, catTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	catTypeAfterUpdateHooks = []CatTypeHook{}

	AddCatTypeHook(boil.BeforeDeleteHook, catTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	catTypeBeforeDeleteHooks = []CatTypeHook{}

	AddCatTypeHook(boil.AfterDeleteHook, catTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	catTypeAfterDeleteHooks = []CatTypeHook{}

	AddCatTypeHook(boil.BeforeUpsertHook, catTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	catTypeBeforeUpsertHooks = []CatTypeHook{}

	AddCatTypeHook(boil.AfterUpsertHook, catTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	catTypeAfterUpsertHooks = []CatTypeHook{}
}

func testCatTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CatTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCatTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(catTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CatTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCatTypeToManyOnlyForTypeCatActivities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CatType
	var b, c CatActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, catActivityDBTypes, false, catActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, catActivityDBTypes, false, catActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OnlyForType, a.ID)
	queries.Assign(&c.OnlyForType, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OnlyForTypeCatActivities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OnlyForType, b.OnlyForType) {
			bFound = true
		}
		if queries.Equal(v.OnlyForType, c.OnlyForType) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CatTypeSlice{&a}
	if err = a.L.LoadOnlyForTypeCatActivities(ctx, tx, false, (*[]*CatType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OnlyForTypeCatActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OnlyForTypeCatActivities = nil
	if err = a.L.LoadOnlyForTypeCatActivities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OnlyForTypeCatActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCatTypeToManyTypeCats(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CatType
	var b, c Cat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, catDBTypes, false, catColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, catDBTypes, false, catColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TypeID = a.ID
	c.TypeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TypeCats().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TypeID == b.TypeID {
			bFound = true
		}
		if v.TypeID == c.TypeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CatTypeSlice{&a}
	if err = a.L.LoadTypeCats(ctx, tx, false, (*[]*CatType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TypeCats); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TypeCats = nil
	if err = a.L.LoadTypeCats(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TypeCats); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCatTypeToManyAddOpOnlyForTypeCatActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CatType
	var b, c, d, e CatActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catTypeDBTypes, false, strmangle.SetComplement(catTypePrimaryKeyColumns, catTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CatActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, catActivityDBTypes, false, strmangle.SetComplement(catActivityPrimaryKeyColumns, catActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CatActivity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOnlyForTypeCatActivities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.OnlyForType) {
			t.Error("foreign key was wrong value", a.ID, first.OnlyForType)
		}
		if !queries.Equal(a.ID, second.OnlyForType) {
			t.Error("foreign key was wrong value", a.ID, second.OnlyForType)
		}

		if first.R.OnlyForTypeCatType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OnlyForTypeCatType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OnlyForTypeCatActivities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OnlyForTypeCatActivities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OnlyForTypeCatActivities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCatTypeToManySetOpOnlyForTypeCatActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CatType
	var b, c, d, e CatActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catTypeDBTypes, false, strmangle.SetComplement(catTypePrimaryKeyColumns, catTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CatActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, catActivityDBTypes, false, strmangle.SetComplement(catActivityPrimaryKeyColumns, catActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOnlyForTypeCatActivities(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OnlyForTypeCatActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOnlyForTypeCatActivities(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OnlyForTypeCatActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OnlyForType) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OnlyForType) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.OnlyForType) {
		t.Error("foreign key was wrong value", a.ID, d.OnlyForType)
	}
	if !queries.Equal(a.ID, e.OnlyForType) {
		t.Error("foreign key was wrong value", a.ID, e.OnlyForType)
	}

	if b.R.OnlyForTypeCatType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OnlyForTypeCatType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OnlyForTypeCatType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OnlyForTypeCatType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OnlyForTypeCatActivities[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OnlyForTypeCatActivities[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCatTypeToManyRemoveOpOnlyForTypeCatActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CatType
	var b, c, d, e CatActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catTypeDBTypes, false, strmangle.SetComplement(catTypePrimaryKeyColumns, catTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CatActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, catActivityDBTypes, false, strmangle.SetComplement(catActivityPrimaryKeyColumns, catActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOnlyForTypeCatActivities(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OnlyForTypeCatActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOnlyForTypeCatActivities(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OnlyForTypeCatActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OnlyForType) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OnlyForType) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OnlyForTypeCatType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OnlyForTypeCatType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OnlyForTypeCatType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OnlyForTypeCatType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OnlyForTypeCatActivities) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OnlyForTypeCatActivities[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OnlyForTypeCatActivities[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCatTypeToManyAddOpTypeCats(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CatType
	var b, c, d, e Cat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catTypeDBTypes, false, strmangle.SetComplement(catTypePrimaryKeyColumns, catTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Cat{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, catDBTypes, false, strmangle.SetComplement(catPrimaryKeyColumns, catColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Cat{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTypeCats(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TypeID {
			t.Error("foreign key was wrong value", a.ID, first.TypeID)
		}
		if a.ID != second.TypeID {
			t.Error("foreign key was wrong value", a.ID, second.TypeID)
		}

		if first.R.Type != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Type != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TypeCats[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TypeCats[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TypeCats().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCatTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCatTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CatTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCatTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CatTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	catTypeDBTypes = map[string]string{`ID`: `integer`, `Name`: `text`, `AvatarURL`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testCatTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(catTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(catTypeAllColumns) == len(catTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CatTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCatTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(catTypeAllColumns) == len(catTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CatType{}
	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CatTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, catTypeDBTypes, true, catTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(catTypeAllColumns, catTypePrimaryKeyColumns) {
		fields = catTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			catTypeAllColumns,
			catTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CatTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCatTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(catTypeAllColumns) == len(catTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CatType{}
	if err = randomize.Struct(seed, &o, catTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CatType: %s", err)
	}

	count, err := CatTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, catTypeDBTypes, false, catTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CatType: %s", err)
	}

	count, err = CatTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
