// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CatType is an object representing the database table.
type CatType struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	AvatarURL string    `boil:"avatar_url" json:"avatar_url" toml:"avatar_url" yaml:"avatar_url"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *catTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L catTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CatTypeColumns = struct {
	ID        string
	Name      string
	AvatarURL string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	AvatarURL: "avatar_url",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// Generated where

var CatTypeWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	AvatarURL whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"cat_types\".\"id\""},
	Name:      whereHelperstring{field: "\"cat_types\".\"name\""},
	AvatarURL: whereHelperstring{field: "\"cat_types\".\"avatar_url\""},
	CreatedAt: whereHelpertime_Time{field: "\"cat_types\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"cat_types\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"cat_types\".\"deleted_at\""},
}

// CatTypeRels is where relationship names are stored.
var CatTypeRels = struct {
	OnlyForTypeCatActivities string
	TypeCats                 string
}{
	OnlyForTypeCatActivities: "OnlyForTypeCatActivities",
	TypeCats:                 "TypeCats",
}

// catTypeR is where relationships are stored.
type catTypeR struct {
	OnlyForTypeCatActivities CatActivitySlice `boil:"OnlyForTypeCatActivities" json:"OnlyForTypeCatActivities" toml:"OnlyForTypeCatActivities" yaml:"OnlyForTypeCatActivities"`
	TypeCats                 CatSlice         `boil:"TypeCats" json:"TypeCats" toml:"TypeCats" yaml:"TypeCats"`
}

// NewStruct creates a new relationship struct
func (*catTypeR) NewStruct() *catTypeR {
	return &catTypeR{}
}

// catTypeL is where Load methods for each relationship are stored.
type catTypeL struct{}

var (
	catTypeAllColumns            = []string{"id", "name", "avatar_url", "created_at", "updated_at", "deleted_at"}
	catTypeColumnsWithoutDefault = []string{"name", "avatar_url", "created_at", "updated_at", "deleted_at"}
	catTypeColumnsWithDefault    = []string{"id"}
	catTypePrimaryKeyColumns     = []string{"id"}
)

type (
	// CatTypeSlice is an alias for a slice of pointers to CatType.
	// This should generally be used opposed to []CatType.
	CatTypeSlice []*CatType
	// CatTypeHook is the signature for custom CatType hook methods
	CatTypeHook func(context.Context, boil.ContextExecutor, *CatType) error

	catTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	catTypeType                 = reflect.TypeOf(&CatType{})
	catTypeMapping              = queries.MakeStructMapping(catTypeType)
	catTypePrimaryKeyMapping, _ = queries.BindMapping(catTypeType, catTypeMapping, catTypePrimaryKeyColumns)
	catTypeInsertCacheMut       sync.RWMutex
	catTypeInsertCache          = make(map[string]insertCache)
	catTypeUpdateCacheMut       sync.RWMutex
	catTypeUpdateCache          = make(map[string]updateCache)
	catTypeUpsertCacheMut       sync.RWMutex
	catTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var catTypeBeforeInsertHooks []CatTypeHook
var catTypeBeforeUpdateHooks []CatTypeHook
var catTypeBeforeDeleteHooks []CatTypeHook
var catTypeBeforeUpsertHooks []CatTypeHook

var catTypeAfterInsertHooks []CatTypeHook
var catTypeAfterSelectHooks []CatTypeHook
var catTypeAfterUpdateHooks []CatTypeHook
var catTypeAfterDeleteHooks []CatTypeHook
var catTypeAfterUpsertHooks []CatTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CatType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CatType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CatType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CatType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CatType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CatType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CatType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CatType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CatType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCatTypeHook registers your hook function for all future operations.
func AddCatTypeHook(hookPoint boil.HookPoint, catTypeHook CatTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		catTypeBeforeInsertHooks = append(catTypeBeforeInsertHooks, catTypeHook)
	case boil.BeforeUpdateHook:
		catTypeBeforeUpdateHooks = append(catTypeBeforeUpdateHooks, catTypeHook)
	case boil.BeforeDeleteHook:
		catTypeBeforeDeleteHooks = append(catTypeBeforeDeleteHooks, catTypeHook)
	case boil.BeforeUpsertHook:
		catTypeBeforeUpsertHooks = append(catTypeBeforeUpsertHooks, catTypeHook)
	case boil.AfterInsertHook:
		catTypeAfterInsertHooks = append(catTypeAfterInsertHooks, catTypeHook)
	case boil.AfterSelectHook:
		catTypeAfterSelectHooks = append(catTypeAfterSelectHooks, catTypeHook)
	case boil.AfterUpdateHook:
		catTypeAfterUpdateHooks = append(catTypeAfterUpdateHooks, catTypeHook)
	case boil.AfterDeleteHook:
		catTypeAfterDeleteHooks = append(catTypeAfterDeleteHooks, catTypeHook)
	case boil.AfterUpsertHook:
		catTypeAfterUpsertHooks = append(catTypeAfterUpsertHooks, catTypeHook)
	}
}

// One returns a single catType record from the query.
func (q catTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CatType, error) {
	o := &CatType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cat_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CatType records from the query.
func (q catTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (CatTypeSlice, error) {
	var o []*CatType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CatType slice")
	}

	if len(catTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CatType records in the query.
func (q catTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cat_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q catTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cat_types exists")
	}

	return count > 0, nil
}

// OnlyForTypeCatActivities retrieves all the cat_activity's CatActivities with an executor via only_for_type column.
func (o *CatType) OnlyForTypeCatActivities(mods ...qm.QueryMod) catActivityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cat_activities\".\"only_for_type\"=?", o.ID),
	)

	query := CatActivities(queryMods...)
	queries.SetFrom(query.Query, "\"cat_activities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cat_activities\".*"})
	}

	return query
}

// TypeCats retrieves all the cat's Cats with an executor via type_id column.
func (o *CatType) TypeCats(mods ...qm.QueryMod) catQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cats\".\"type_id\"=?", o.ID),
	)

	query := Cats(queryMods...)
	queries.SetFrom(query.Query, "\"cats\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cats\".*"})
	}

	return query
}

// LoadOnlyForTypeCatActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (catTypeL) LoadOnlyForTypeCatActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCatType interface{}, mods queries.Applicator) error {
	var slice []*CatType
	var object *CatType

	if singular {
		object = maybeCatType.(*CatType)
	} else {
		slice = *maybeCatType.(*[]*CatType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &catTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &catTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cat_activities`),
		qm.WhereIn(`cat_activities.only_for_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cat_activities")
	}

	var resultSlice []*CatActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cat_activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cat_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cat_activities")
	}

	if len(catActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OnlyForTypeCatActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &catActivityR{}
			}
			foreign.R.OnlyForTypeCatType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OnlyForType) {
				local.R.OnlyForTypeCatActivities = append(local.R.OnlyForTypeCatActivities, foreign)
				if foreign.R == nil {
					foreign.R = &catActivityR{}
				}
				foreign.R.OnlyForTypeCatType = local
				break
			}
		}
	}

	return nil
}

// LoadTypeCats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (catTypeL) LoadTypeCats(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCatType interface{}, mods queries.Applicator) error {
	var slice []*CatType
	var object *CatType

	if singular {
		object = maybeCatType.(*CatType)
	} else {
		slice = *maybeCatType.(*[]*CatType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &catTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &catTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cats`),
		qm.WhereIn(`cats.type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cats")
	}

	var resultSlice []*Cat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cats")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cats")
	}

	if len(catAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TypeCats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &catR{}
			}
			foreign.R.Type = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TypeID {
				local.R.TypeCats = append(local.R.TypeCats, foreign)
				if foreign.R == nil {
					foreign.R = &catR{}
				}
				foreign.R.Type = local
				break
			}
		}
	}

	return nil
}

// AddOnlyForTypeCatActivities adds the given related objects to the existing relationships
// of the cat_type, optionally inserting them as new records.
// Appends related to o.R.OnlyForTypeCatActivities.
// Sets related.R.OnlyForTypeCatType appropriately.
func (o *CatType) AddOnlyForTypeCatActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CatActivity) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OnlyForType, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cat_activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"only_for_type"}),
				strmangle.WhereClause("\"", "\"", 2, catActivityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OnlyForType, o.ID)
		}
	}

	if o.R == nil {
		o.R = &catTypeR{
			OnlyForTypeCatActivities: related,
		}
	} else {
		o.R.OnlyForTypeCatActivities = append(o.R.OnlyForTypeCatActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &catActivityR{
				OnlyForTypeCatType: o,
			}
		} else {
			rel.R.OnlyForTypeCatType = o
		}
	}
	return nil
}

// SetOnlyForTypeCatActivities removes all previously related items of the
// cat_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OnlyForTypeCatType's OnlyForTypeCatActivities accordingly.
// Replaces o.R.OnlyForTypeCatActivities with related.
// Sets related.R.OnlyForTypeCatType's OnlyForTypeCatActivities accordingly.
func (o *CatType) SetOnlyForTypeCatActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CatActivity) error {
	query := "update \"cat_activities\" set \"only_for_type\" = null where \"only_for_type\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OnlyForTypeCatActivities {
			queries.SetScanner(&rel.OnlyForType, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OnlyForTypeCatType = nil
		}

		o.R.OnlyForTypeCatActivities = nil
	}
	return o.AddOnlyForTypeCatActivities(ctx, exec, insert, related...)
}

// RemoveOnlyForTypeCatActivities relationships from objects passed in.
// Removes related items from R.OnlyForTypeCatActivities (uses pointer comparison, removal does not keep order)
// Sets related.R.OnlyForTypeCatType.
func (o *CatType) RemoveOnlyForTypeCatActivities(ctx context.Context, exec boil.ContextExecutor, related ...*CatActivity) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OnlyForType, nil)
		if rel.R != nil {
			rel.R.OnlyForTypeCatType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("only_for_type")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OnlyForTypeCatActivities {
			if rel != ri {
				continue
			}

			ln := len(o.R.OnlyForTypeCatActivities)
			if ln > 1 && i < ln-1 {
				o.R.OnlyForTypeCatActivities[i] = o.R.OnlyForTypeCatActivities[ln-1]
			}
			o.R.OnlyForTypeCatActivities = o.R.OnlyForTypeCatActivities[:ln-1]
			break
		}
	}

	return nil
}

// AddTypeCats adds the given related objects to the existing relationships
// of the cat_type, optionally inserting them as new records.
// Appends related to o.R.TypeCats.
// Sets related.R.Type appropriately.
func (o *CatType) AddTypeCats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Cat) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cats\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"type_id"}),
				strmangle.WhereClause("\"", "\"", 2, catPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &catTypeR{
			TypeCats: related,
		}
	} else {
		o.R.TypeCats = append(o.R.TypeCats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &catR{
				Type: o,
			}
		} else {
			rel.R.Type = o
		}
	}
	return nil
}

// CatTypes retrieves all the records using an executor.
func CatTypes(mods ...qm.QueryMod) catTypeQuery {
	mods = append(mods, qm.From("\"cat_types\""))
	return catTypeQuery{NewQuery(mods...)}
}

// FindCatType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCatType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CatType, error) {
	catTypeObj := &CatType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cat_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, catTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cat_types")
	}

	return catTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CatType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cat_types provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(catTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	catTypeInsertCacheMut.RLock()
	cache, cached := catTypeInsertCache[key]
	catTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			catTypeAllColumns,
			catTypeColumnsWithDefault,
			catTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(catTypeType, catTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(catTypeType, catTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cat_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cat_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cat_types")
	}

	if !cached {
		catTypeInsertCacheMut.Lock()
		catTypeInsertCache[key] = cache
		catTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CatType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CatType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	catTypeUpdateCacheMut.RLock()
	cache, cached := catTypeUpdateCache[key]
	catTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			catTypeAllColumns,
			catTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cat_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cat_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, catTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(catTypeType, catTypeMapping, append(wl, catTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cat_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cat_types")
	}

	if !cached {
		catTypeUpdateCacheMut.Lock()
		catTypeUpdateCache[key] = cache
		catTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q catTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cat_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cat_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CatTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cat_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, catTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in catType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all catType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CatType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cat_types provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(catTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	catTypeUpsertCacheMut.RLock()
	cache, cached := catTypeUpsertCache[key]
	catTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			catTypeAllColumns,
			catTypeColumnsWithDefault,
			catTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			catTypeAllColumns,
			catTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cat_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(catTypePrimaryKeyColumns))
			copy(conflict, catTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cat_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(catTypeType, catTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(catTypeType, catTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cat_types")
	}

	if !cached {
		catTypeUpsertCacheMut.Lock()
		catTypeUpsertCache[key] = cache
		catTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CatType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CatType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CatType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), catTypePrimaryKeyMapping)
	sql := "DELETE FROM \"cat_types\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cat_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cat_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q catTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no catTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cat_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cat_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CatTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(catTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cat_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, catTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from catType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cat_types")
	}

	if len(catTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CatType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCatType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CatTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CatTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cat_types\".* FROM \"cat_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, catTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CatTypeSlice")
	}

	*o = slice

	return nil
}

// CatTypeExists checks if the CatType row exists.
func CatTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cat_types\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cat_types exists")
	}

	return exists, nil
}
