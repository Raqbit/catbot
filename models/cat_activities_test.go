// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCatActivities(t *testing.T) {
	t.Parallel()

	query := CatActivities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCatActivitiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CatActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCatActivitiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CatActivities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CatActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCatActivitiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CatActivitySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CatActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCatActivitiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CatActivityExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CatActivity exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CatActivityExists to return true, but got false.")
	}
}

func testCatActivitiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	catActivityFound, err := FindCatActivity(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if catActivityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCatActivitiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CatActivities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCatActivitiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CatActivities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCatActivitiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	catActivityOne := &CatActivity{}
	catActivityTwo := &CatActivity{}
	if err = randomize.Struct(seed, catActivityOne, catActivityDBTypes, false, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}
	if err = randomize.Struct(seed, catActivityTwo, catActivityDBTypes, false, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = catActivityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = catActivityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CatActivities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCatActivitiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	catActivityOne := &CatActivity{}
	catActivityTwo := &CatActivity{}
	if err = randomize.Struct(seed, catActivityOne, catActivityDBTypes, false, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}
	if err = randomize.Struct(seed, catActivityTwo, catActivityDBTypes, false, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = catActivityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = catActivityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CatActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func catActivityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CatActivity) error {
	*o = CatActivity{}
	return nil
}

func catActivityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CatActivity) error {
	*o = CatActivity{}
	return nil
}

func catActivityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CatActivity) error {
	*o = CatActivity{}
	return nil
}

func catActivityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CatActivity) error {
	*o = CatActivity{}
	return nil
}

func catActivityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CatActivity) error {
	*o = CatActivity{}
	return nil
}

func catActivityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CatActivity) error {
	*o = CatActivity{}
	return nil
}

func catActivityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CatActivity) error {
	*o = CatActivity{}
	return nil
}

func catActivityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CatActivity) error {
	*o = CatActivity{}
	return nil
}

func catActivityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CatActivity) error {
	*o = CatActivity{}
	return nil
}

func testCatActivitiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CatActivity{}
	o := &CatActivity{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, catActivityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CatActivity object: %s", err)
	}

	AddCatActivityHook(boil.BeforeInsertHook, catActivityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	catActivityBeforeInsertHooks = []CatActivityHook{}

	AddCatActivityHook(boil.AfterInsertHook, catActivityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	catActivityAfterInsertHooks = []CatActivityHook{}

	AddCatActivityHook(boil.AfterSelectHook, catActivityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	catActivityAfterSelectHooks = []CatActivityHook{}

	AddCatActivityHook(boil.BeforeUpdateHook, catActivityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	catActivityBeforeUpdateHooks = []CatActivityHook{}

	AddCatActivityHook(boil.AfterUpdateHook, catActivityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	catActivityAfterUpdateHooks = []CatActivityHook{}

	AddCatActivityHook(boil.BeforeDeleteHook, catActivityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	catActivityBeforeDeleteHooks = []CatActivityHook{}

	AddCatActivityHook(boil.AfterDeleteHook, catActivityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	catActivityAfterDeleteHooks = []CatActivityHook{}

	AddCatActivityHook(boil.BeforeUpsertHook, catActivityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	catActivityBeforeUpsertHooks = []CatActivityHook{}

	AddCatActivityHook(boil.AfterUpsertHook, catActivityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	catActivityAfterUpsertHooks = []CatActivityHook{}
}

func testCatActivitiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CatActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCatActivitiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(catActivityColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CatActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCatActivityToManyCurrentActivityCats(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CatActivity
	var b, c Cat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, catDBTypes, false, catColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, catDBTypes, false, catColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CurrentActivityID = a.ID
	c.CurrentActivityID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CurrentActivityCats().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CurrentActivityID == b.CurrentActivityID {
			bFound = true
		}
		if v.CurrentActivityID == c.CurrentActivityID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CatActivitySlice{&a}
	if err = a.L.LoadCurrentActivityCats(ctx, tx, false, (*[]*CatActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CurrentActivityCats); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CurrentActivityCats = nil
	if err = a.L.LoadCurrentActivityCats(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CurrentActivityCats); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCatActivityToManyAddOpCurrentActivityCats(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CatActivity
	var b, c, d, e Cat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catActivityDBTypes, false, strmangle.SetComplement(catActivityPrimaryKeyColumns, catActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Cat{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, catDBTypes, false, strmangle.SetComplement(catPrimaryKeyColumns, catColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Cat{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCurrentActivityCats(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CurrentActivityID {
			t.Error("foreign key was wrong value", a.ID, first.CurrentActivityID)
		}
		if a.ID != second.CurrentActivityID {
			t.Error("foreign key was wrong value", a.ID, second.CurrentActivityID)
		}

		if first.R.CurrentActivity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CurrentActivity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CurrentActivityCats[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CurrentActivityCats[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CurrentActivityCats().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCatActivityToOneCatTypeUsingOnlyForTypeCatType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CatActivity
	var foreign CatType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, catTypeDBTypes, false, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OnlyForType, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OnlyForTypeCatType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CatActivitySlice{&local}
	if err = local.L.LoadOnlyForTypeCatType(ctx, tx, false, (*[]*CatActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OnlyForTypeCatType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OnlyForTypeCatType = nil
	if err = local.L.LoadOnlyForTypeCatType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OnlyForTypeCatType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCatActivityToOneSetOpCatTypeUsingOnlyForTypeCatType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CatActivity
	var b, c CatType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catActivityDBTypes, false, strmangle.SetComplement(catActivityPrimaryKeyColumns, catActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, catTypeDBTypes, false, strmangle.SetComplement(catTypePrimaryKeyColumns, catTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, catTypeDBTypes, false, strmangle.SetComplement(catTypePrimaryKeyColumns, catTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CatType{&b, &c} {
		err = a.SetOnlyForTypeCatType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OnlyForTypeCatType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OnlyForTypeCatActivities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OnlyForType, x.ID) {
			t.Error("foreign key was wrong value", a.OnlyForType)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OnlyForType))
		reflect.Indirect(reflect.ValueOf(&a.OnlyForType)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OnlyForType, x.ID) {
			t.Error("foreign key was wrong value", a.OnlyForType, x.ID)
		}
	}
}

func testCatActivityToOneRemoveOpCatTypeUsingOnlyForTypeCatType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CatActivity
	var b CatType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catActivityDBTypes, false, strmangle.SetComplement(catActivityPrimaryKeyColumns, catActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, catTypeDBTypes, false, strmangle.SetComplement(catTypePrimaryKeyColumns, catTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOnlyForTypeCatType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOnlyForTypeCatType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OnlyForTypeCatType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OnlyForTypeCatType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OnlyForType) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OnlyForTypeCatActivities) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCatActivitiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCatActivitiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CatActivitySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCatActivitiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CatActivities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	catActivityDBTypes = map[string]string{`ID`: `integer`, `Description`: `text`, `OnlyForType`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testCatActivitiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(catActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(catActivityAllColumns) == len(catActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CatActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCatActivitiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(catActivityAllColumns) == len(catActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CatActivity{}
	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CatActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, catActivityDBTypes, true, catActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(catActivityAllColumns, catActivityPrimaryKeyColumns) {
		fields = catActivityAllColumns
	} else {
		fields = strmangle.SetComplement(
			catActivityAllColumns,
			catActivityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CatActivitySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCatActivitiesUpsert(t *testing.T) {
	t.Parallel()

	if len(catActivityAllColumns) == len(catActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CatActivity{}
	if err = randomize.Struct(seed, &o, catActivityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CatActivity: %s", err)
	}

	count, err := CatActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, catActivityDBTypes, false, catActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CatActivity: %s", err)
	}

	count, err = CatActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
