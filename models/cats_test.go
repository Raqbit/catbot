// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCats(t *testing.T) {
	t.Parallel()

	query := Cats()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCatsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Cats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCatsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Cats().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Cats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCatsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CatSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Cats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCatsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CatExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Cat exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CatExists to return true, but got false.")
	}
}

func testCatsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	catFound, err := FindCat(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if catFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCatsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Cats().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCatsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Cats().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCatsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	catOne := &Cat{}
	catTwo := &Cat{}
	if err = randomize.Struct(seed, catOne, catDBTypes, false, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}
	if err = randomize.Struct(seed, catTwo, catDBTypes, false, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = catOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = catTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Cats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCatsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	catOne := &Cat{}
	catTwo := &Cat{}
	if err = randomize.Struct(seed, catOne, catDBTypes, false, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}
	if err = randomize.Struct(seed, catTwo, catDBTypes, false, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = catOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = catTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func catBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Cat) error {
	*o = Cat{}
	return nil
}

func catAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Cat) error {
	*o = Cat{}
	return nil
}

func catAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Cat) error {
	*o = Cat{}
	return nil
}

func catBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Cat) error {
	*o = Cat{}
	return nil
}

func catAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Cat) error {
	*o = Cat{}
	return nil
}

func catBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Cat) error {
	*o = Cat{}
	return nil
}

func catAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Cat) error {
	*o = Cat{}
	return nil
}

func catBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Cat) error {
	*o = Cat{}
	return nil
}

func catAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Cat) error {
	*o = Cat{}
	return nil
}

func testCatsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Cat{}
	o := &Cat{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, catDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Cat object: %s", err)
	}

	AddCatHook(boil.BeforeInsertHook, catBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	catBeforeInsertHooks = []CatHook{}

	AddCatHook(boil.AfterInsertHook, catAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	catAfterInsertHooks = []CatHook{}

	AddCatHook(boil.AfterSelectHook, catAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	catAfterSelectHooks = []CatHook{}

	AddCatHook(boil.BeforeUpdateHook, catBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	catBeforeUpdateHooks = []CatHook{}

	AddCatHook(boil.AfterUpdateHook, catAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	catAfterUpdateHooks = []CatHook{}

	AddCatHook(boil.BeforeDeleteHook, catBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	catBeforeDeleteHooks = []CatHook{}

	AddCatHook(boil.AfterDeleteHook, catAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	catAfterDeleteHooks = []CatHook{}

	AddCatHook(boil.BeforeUpsertHook, catBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	catBeforeUpsertHooks = []CatHook{}

	AddCatHook(boil.AfterUpsertHook, catAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	catAfterUpsertHooks = []CatHook{}
}

func testCatsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCatsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(catColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Cats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCatToOneCatActivityUsingCurrentActivity(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Cat
	var foreign CatActivity

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, catDBTypes, false, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, catActivityDBTypes, false, catActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatActivity struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CurrentActivityID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CurrentActivity().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CatSlice{&local}
	if err = local.L.LoadCurrentActivity(ctx, tx, false, (*[]*Cat)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CurrentActivity == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CurrentActivity = nil
	if err = local.L.LoadCurrentActivity(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CurrentActivity == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCatToOneCatTypeUsingType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Cat
	var foreign CatType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, catDBTypes, false, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, catTypeDBTypes, false, catTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CatType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Type().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CatSlice{&local}
	if err = local.L.LoadType(ctx, tx, false, (*[]*Cat)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Type == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Type = nil
	if err = local.L.LoadType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Type == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCatToOneUserUsingOwner(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Cat
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, catDBTypes, false, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OwnerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Owner().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CatSlice{&local}
	if err = local.L.LoadOwner(ctx, tx, false, (*[]*Cat)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Owner == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Owner = nil
	if err = local.L.LoadOwner(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Owner == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCatToOneSetOpCatActivityUsingCurrentActivity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cat
	var b, c CatActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catDBTypes, false, strmangle.SetComplement(catPrimaryKeyColumns, catColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, catActivityDBTypes, false, strmangle.SetComplement(catActivityPrimaryKeyColumns, catActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, catActivityDBTypes, false, strmangle.SetComplement(catActivityPrimaryKeyColumns, catActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CatActivity{&b, &c} {
		err = a.SetCurrentActivity(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CurrentActivity != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CurrentActivityCats[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CurrentActivityID != x.ID {
			t.Error("foreign key was wrong value", a.CurrentActivityID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CurrentActivityID))
		reflect.Indirect(reflect.ValueOf(&a.CurrentActivityID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CurrentActivityID != x.ID {
			t.Error("foreign key was wrong value", a.CurrentActivityID, x.ID)
		}
	}
}
func testCatToOneSetOpCatTypeUsingType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cat
	var b, c CatType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catDBTypes, false, strmangle.SetComplement(catPrimaryKeyColumns, catColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, catTypeDBTypes, false, strmangle.SetComplement(catTypePrimaryKeyColumns, catTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, catTypeDBTypes, false, strmangle.SetComplement(catTypePrimaryKeyColumns, catTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CatType{&b, &c} {
		err = a.SetType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Type != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TypeCats[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TypeID != x.ID {
			t.Error("foreign key was wrong value", a.TypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TypeID))
		reflect.Indirect(reflect.ValueOf(&a.TypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TypeID != x.ID {
			t.Error("foreign key was wrong value", a.TypeID, x.ID)
		}
	}
}
func testCatToOneSetOpUserUsingOwner(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cat
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, catDBTypes, false, strmangle.SetComplement(catPrimaryKeyColumns, catColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetOwner(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Owner != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OwnerCat != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OwnerID != x.ID {
			t.Error("foreign key was wrong value", a.OwnerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OwnerID))
		reflect.Indirect(reflect.ValueOf(&a.OwnerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OwnerID != x.ID {
			t.Error("foreign key was wrong value", a.OwnerID, x.ID)
		}
	}
}

func testCatsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCatsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CatSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCatsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Cats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	catDBTypes = map[string]string{`ID`: `integer`, `TypeID`: `integer`, `CurrentActivityID`: `integer`, `OwnerID`: `integer`, `Hunger`: `integer`, `WantsHam`: `boolean`, `LastFed`: `timestamp without time zone`, `LastHam`: `timestamp without time zone`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_          = bytes.MinRead
)

func testCatsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(catPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(catAllColumns) == len(catPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, catDBTypes, true, catPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCatsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(catAllColumns) == len(catPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Cat{}
	if err = randomize.Struct(seed, o, catDBTypes, true, catColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, catDBTypes, true, catPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(catAllColumns, catPrimaryKeyColumns) {
		fields = catAllColumns
	} else {
		fields = strmangle.SetComplement(
			catAllColumns,
			catPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CatSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCatsUpsert(t *testing.T) {
	t.Parallel()

	if len(catAllColumns) == len(catPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Cat{}
	if err = randomize.Struct(seed, &o, catDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Cat: %s", err)
	}

	count, err := Cats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, catDBTypes, false, catPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cat struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Cat: %s", err)
	}

	count, err = Cats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
