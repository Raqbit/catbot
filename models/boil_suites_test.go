// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("CatActivities", testCatActivities)
	t.Run("CatTypes", testCatTypes)
	t.Run("Cats", testCats)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesDelete)
	t.Run("CatTypes", testCatTypesDelete)
	t.Run("Cats", testCatsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesQueryDeleteAll)
	t.Run("CatTypes", testCatTypesQueryDeleteAll)
	t.Run("Cats", testCatsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesSliceDeleteAll)
	t.Run("CatTypes", testCatTypesSliceDeleteAll)
	t.Run("Cats", testCatsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesExists)
	t.Run("CatTypes", testCatTypesExists)
	t.Run("Cats", testCatsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesFind)
	t.Run("CatTypes", testCatTypesFind)
	t.Run("Cats", testCatsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesBind)
	t.Run("CatTypes", testCatTypesBind)
	t.Run("Cats", testCatsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesOne)
	t.Run("CatTypes", testCatTypesOne)
	t.Run("Cats", testCatsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesAll)
	t.Run("CatTypes", testCatTypesAll)
	t.Run("Cats", testCatsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesCount)
	t.Run("CatTypes", testCatTypesCount)
	t.Run("Cats", testCatsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesHooks)
	t.Run("CatTypes", testCatTypesHooks)
	t.Run("Cats", testCatsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesInsert)
	t.Run("CatActivities", testCatActivitiesInsertWhitelist)
	t.Run("CatTypes", testCatTypesInsert)
	t.Run("CatTypes", testCatTypesInsertWhitelist)
	t.Run("Cats", testCatsInsert)
	t.Run("Cats", testCatsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CatActivityToCatTypeUsingOnlyForTypeCatType", testCatActivityToOneCatTypeUsingOnlyForTypeCatType)
	t.Run("CatToCatActivityUsingCurrentActivity", testCatToOneCatActivityUsingCurrentActivity)
	t.Run("CatToCatTypeUsingType", testCatToOneCatTypeUsingType)
	t.Run("CatToUserUsingOwner", testCatToOneUserUsingOwner)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("UserToCatUsingOwnerCat", testUserOneToOneCatUsingOwnerCat)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CatActivityToCurrentActivityCats", testCatActivityToManyCurrentActivityCats)
	t.Run("CatTypeToOnlyForTypeCatActivities", testCatTypeToManyOnlyForTypeCatActivities)
	t.Run("CatTypeToTypeCats", testCatTypeToManyTypeCats)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CatActivityToCatTypeUsingOnlyForTypeCatActivities", testCatActivityToOneSetOpCatTypeUsingOnlyForTypeCatType)
	t.Run("CatToCatActivityUsingCurrentActivityCats", testCatToOneSetOpCatActivityUsingCurrentActivity)
	t.Run("CatToCatTypeUsingTypeCats", testCatToOneSetOpCatTypeUsingType)
	t.Run("CatToUserUsingOwnerCat", testCatToOneSetOpUserUsingOwner)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("CatActivityToCatTypeUsingOnlyForTypeCatActivities", testCatActivityToOneRemoveOpCatTypeUsingOnlyForTypeCatType)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("UserToCatUsingOwnerCat", testUserOneToOneSetOpCatUsingOwnerCat)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CatActivityToCurrentActivityCats", testCatActivityToManyAddOpCurrentActivityCats)
	t.Run("CatTypeToOnlyForTypeCatActivities", testCatTypeToManyAddOpOnlyForTypeCatActivities)
	t.Run("CatTypeToTypeCats", testCatTypeToManyAddOpTypeCats)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CatTypeToOnlyForTypeCatActivities", testCatTypeToManySetOpOnlyForTypeCatActivities)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CatTypeToOnlyForTypeCatActivities", testCatTypeToManyRemoveOpOnlyForTypeCatActivities)
}

func TestReload(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesReload)
	t.Run("CatTypes", testCatTypesReload)
	t.Run("Cats", testCatsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesReloadAll)
	t.Run("CatTypes", testCatTypesReloadAll)
	t.Run("Cats", testCatsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesSelect)
	t.Run("CatTypes", testCatTypesSelect)
	t.Run("Cats", testCatsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesUpdate)
	t.Run("CatTypes", testCatTypesUpdate)
	t.Run("Cats", testCatsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("CatActivities", testCatActivitiesSliceUpdateAll)
	t.Run("CatTypes", testCatTypesSliceUpdateAll)
	t.Run("Cats", testCatsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
