// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CatActivity is an object representing the database table.
type CatActivity struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	OnlyForType null.Int  `boil:"only_for_type" json:"only_for_type,omitempty" toml:"only_for_type" yaml:"only_for_type,omitempty"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *catActivityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L catActivityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CatActivityColumns = struct {
	ID          string
	Description string
	OnlyForType string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	Description: "description",
	OnlyForType: "only_for_type",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CatActivityWhere = struct {
	ID          whereHelperint
	Description whereHelperstring
	OnlyForType whereHelpernull_Int
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "\"cat_activities\".\"id\""},
	Description: whereHelperstring{field: "\"cat_activities\".\"description\""},
	OnlyForType: whereHelpernull_Int{field: "\"cat_activities\".\"only_for_type\""},
	CreatedAt:   whereHelpertime_Time{field: "\"cat_activities\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"cat_activities\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"cat_activities\".\"deleted_at\""},
}

// CatActivityRels is where relationship names are stored.
var CatActivityRels = struct {
	OnlyForTypeCatType  string
	CurrentActivityCats string
}{
	OnlyForTypeCatType:  "OnlyForTypeCatType",
	CurrentActivityCats: "CurrentActivityCats",
}

// catActivityR is where relationships are stored.
type catActivityR struct {
	OnlyForTypeCatType  *CatType `boil:"OnlyForTypeCatType" json:"OnlyForTypeCatType" toml:"OnlyForTypeCatType" yaml:"OnlyForTypeCatType"`
	CurrentActivityCats CatSlice `boil:"CurrentActivityCats" json:"CurrentActivityCats" toml:"CurrentActivityCats" yaml:"CurrentActivityCats"`
}

// NewStruct creates a new relationship struct
func (*catActivityR) NewStruct() *catActivityR {
	return &catActivityR{}
}

// catActivityL is where Load methods for each relationship are stored.
type catActivityL struct{}

var (
	catActivityAllColumns            = []string{"id", "description", "only_for_type", "created_at", "updated_at", "deleted_at"}
	catActivityColumnsWithoutDefault = []string{"description", "only_for_type", "created_at", "updated_at", "deleted_at"}
	catActivityColumnsWithDefault    = []string{"id"}
	catActivityPrimaryKeyColumns     = []string{"id"}
)

type (
	// CatActivitySlice is an alias for a slice of pointers to CatActivity.
	// This should generally be used opposed to []CatActivity.
	CatActivitySlice []*CatActivity
	// CatActivityHook is the signature for custom CatActivity hook methods
	CatActivityHook func(context.Context, boil.ContextExecutor, *CatActivity) error

	catActivityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	catActivityType                 = reflect.TypeOf(&CatActivity{})
	catActivityMapping              = queries.MakeStructMapping(catActivityType)
	catActivityPrimaryKeyMapping, _ = queries.BindMapping(catActivityType, catActivityMapping, catActivityPrimaryKeyColumns)
	catActivityInsertCacheMut       sync.RWMutex
	catActivityInsertCache          = make(map[string]insertCache)
	catActivityUpdateCacheMut       sync.RWMutex
	catActivityUpdateCache          = make(map[string]updateCache)
	catActivityUpsertCacheMut       sync.RWMutex
	catActivityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var catActivityBeforeInsertHooks []CatActivityHook
var catActivityBeforeUpdateHooks []CatActivityHook
var catActivityBeforeDeleteHooks []CatActivityHook
var catActivityBeforeUpsertHooks []CatActivityHook

var catActivityAfterInsertHooks []CatActivityHook
var catActivityAfterSelectHooks []CatActivityHook
var catActivityAfterUpdateHooks []CatActivityHook
var catActivityAfterDeleteHooks []CatActivityHook
var catActivityAfterUpsertHooks []CatActivityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CatActivity) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catActivityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CatActivity) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catActivityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CatActivity) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catActivityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CatActivity) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catActivityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CatActivity) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catActivityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CatActivity) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catActivityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CatActivity) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catActivityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CatActivity) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catActivityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CatActivity) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range catActivityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCatActivityHook registers your hook function for all future operations.
func AddCatActivityHook(hookPoint boil.HookPoint, catActivityHook CatActivityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		catActivityBeforeInsertHooks = append(catActivityBeforeInsertHooks, catActivityHook)
	case boil.BeforeUpdateHook:
		catActivityBeforeUpdateHooks = append(catActivityBeforeUpdateHooks, catActivityHook)
	case boil.BeforeDeleteHook:
		catActivityBeforeDeleteHooks = append(catActivityBeforeDeleteHooks, catActivityHook)
	case boil.BeforeUpsertHook:
		catActivityBeforeUpsertHooks = append(catActivityBeforeUpsertHooks, catActivityHook)
	case boil.AfterInsertHook:
		catActivityAfterInsertHooks = append(catActivityAfterInsertHooks, catActivityHook)
	case boil.AfterSelectHook:
		catActivityAfterSelectHooks = append(catActivityAfterSelectHooks, catActivityHook)
	case boil.AfterUpdateHook:
		catActivityAfterUpdateHooks = append(catActivityAfterUpdateHooks, catActivityHook)
	case boil.AfterDeleteHook:
		catActivityAfterDeleteHooks = append(catActivityAfterDeleteHooks, catActivityHook)
	case boil.AfterUpsertHook:
		catActivityAfterUpsertHooks = append(catActivityAfterUpsertHooks, catActivityHook)
	}
}

// One returns a single catActivity record from the query.
func (q catActivityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CatActivity, error) {
	o := &CatActivity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cat_activities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CatActivity records from the query.
func (q catActivityQuery) All(ctx context.Context, exec boil.ContextExecutor) (CatActivitySlice, error) {
	var o []*CatActivity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CatActivity slice")
	}

	if len(catActivityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CatActivity records in the query.
func (q catActivityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cat_activities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q catActivityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cat_activities exists")
	}

	return count > 0, nil
}

// OnlyForTypeCatType pointed to by the foreign key.
func (o *CatActivity) OnlyForTypeCatType(mods ...qm.QueryMod) catTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OnlyForType),
	}

	queryMods = append(queryMods, mods...)

	query := CatTypes(queryMods...)
	queries.SetFrom(query.Query, "\"cat_types\"")

	return query
}

// CurrentActivityCats retrieves all the cat's Cats with an executor via current_activity_id column.
func (o *CatActivity) CurrentActivityCats(mods ...qm.QueryMod) catQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cats\".\"current_activity_id\"=?", o.ID),
	)

	query := Cats(queryMods...)
	queries.SetFrom(query.Query, "\"cats\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cats\".*"})
	}

	return query
}

// LoadOnlyForTypeCatType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (catActivityL) LoadOnlyForTypeCatType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCatActivity interface{}, mods queries.Applicator) error {
	var slice []*CatActivity
	var object *CatActivity

	if singular {
		object = maybeCatActivity.(*CatActivity)
	} else {
		slice = *maybeCatActivity.(*[]*CatActivity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &catActivityR{}
		}
		if !queries.IsNil(object.OnlyForType) {
			args = append(args, object.OnlyForType)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &catActivityR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OnlyForType) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OnlyForType) {
				args = append(args, obj.OnlyForType)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cat_types`),
		qm.WhereIn(`cat_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CatType")
	}

	var resultSlice []*CatType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CatType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cat_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cat_types")
	}

	if len(catActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OnlyForTypeCatType = foreign
		if foreign.R == nil {
			foreign.R = &catTypeR{}
		}
		foreign.R.OnlyForTypeCatActivities = append(foreign.R.OnlyForTypeCatActivities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OnlyForType, foreign.ID) {
				local.R.OnlyForTypeCatType = foreign
				if foreign.R == nil {
					foreign.R = &catTypeR{}
				}
				foreign.R.OnlyForTypeCatActivities = append(foreign.R.OnlyForTypeCatActivities, local)
				break
			}
		}
	}

	return nil
}

// LoadCurrentActivityCats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (catActivityL) LoadCurrentActivityCats(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCatActivity interface{}, mods queries.Applicator) error {
	var slice []*CatActivity
	var object *CatActivity

	if singular {
		object = maybeCatActivity.(*CatActivity)
	} else {
		slice = *maybeCatActivity.(*[]*CatActivity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &catActivityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &catActivityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cats`),
		qm.WhereIn(`cats.current_activity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cats")
	}

	var resultSlice []*Cat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cats")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cats")
	}

	if len(catAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CurrentActivityCats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &catR{}
			}
			foreign.R.CurrentActivity = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CurrentActivityID {
				local.R.CurrentActivityCats = append(local.R.CurrentActivityCats, foreign)
				if foreign.R == nil {
					foreign.R = &catR{}
				}
				foreign.R.CurrentActivity = local
				break
			}
		}
	}

	return nil
}

// SetOnlyForTypeCatType of the catActivity to the related item.
// Sets o.R.OnlyForTypeCatType to related.
// Adds o to related.R.OnlyForTypeCatActivities.
func (o *CatActivity) SetOnlyForTypeCatType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CatType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cat_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"only_for_type"}),
		strmangle.WhereClause("\"", "\"", 2, catActivityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OnlyForType, related.ID)
	if o.R == nil {
		o.R = &catActivityR{
			OnlyForTypeCatType: related,
		}
	} else {
		o.R.OnlyForTypeCatType = related
	}

	if related.R == nil {
		related.R = &catTypeR{
			OnlyForTypeCatActivities: CatActivitySlice{o},
		}
	} else {
		related.R.OnlyForTypeCatActivities = append(related.R.OnlyForTypeCatActivities, o)
	}

	return nil
}

// RemoveOnlyForTypeCatType relationship.
// Sets o.R.OnlyForTypeCatType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CatActivity) RemoveOnlyForTypeCatType(ctx context.Context, exec boil.ContextExecutor, related *CatType) error {
	var err error

	queries.SetScanner(&o.OnlyForType, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("only_for_type")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OnlyForTypeCatType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OnlyForTypeCatActivities {
		if queries.Equal(o.OnlyForType, ri.OnlyForType) {
			continue
		}

		ln := len(related.R.OnlyForTypeCatActivities)
		if ln > 1 && i < ln-1 {
			related.R.OnlyForTypeCatActivities[i] = related.R.OnlyForTypeCatActivities[ln-1]
		}
		related.R.OnlyForTypeCatActivities = related.R.OnlyForTypeCatActivities[:ln-1]
		break
	}
	return nil
}

// AddCurrentActivityCats adds the given related objects to the existing relationships
// of the cat_activity, optionally inserting them as new records.
// Appends related to o.R.CurrentActivityCats.
// Sets related.R.CurrentActivity appropriately.
func (o *CatActivity) AddCurrentActivityCats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Cat) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CurrentActivityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cats\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"current_activity_id"}),
				strmangle.WhereClause("\"", "\"", 2, catPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CurrentActivityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &catActivityR{
			CurrentActivityCats: related,
		}
	} else {
		o.R.CurrentActivityCats = append(o.R.CurrentActivityCats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &catR{
				CurrentActivity: o,
			}
		} else {
			rel.R.CurrentActivity = o
		}
	}
	return nil
}

// CatActivities retrieves all the records using an executor.
func CatActivities(mods ...qm.QueryMod) catActivityQuery {
	mods = append(mods, qm.From("\"cat_activities\""))
	return catActivityQuery{NewQuery(mods...)}
}

// FindCatActivity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCatActivity(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CatActivity, error) {
	catActivityObj := &CatActivity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cat_activities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, catActivityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cat_activities")
	}

	return catActivityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CatActivity) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cat_activities provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(catActivityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	catActivityInsertCacheMut.RLock()
	cache, cached := catActivityInsertCache[key]
	catActivityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			catActivityAllColumns,
			catActivityColumnsWithDefault,
			catActivityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(catActivityType, catActivityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(catActivityType, catActivityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cat_activities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cat_activities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cat_activities")
	}

	if !cached {
		catActivityInsertCacheMut.Lock()
		catActivityInsertCache[key] = cache
		catActivityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CatActivity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CatActivity) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	catActivityUpdateCacheMut.RLock()
	cache, cached := catActivityUpdateCache[key]
	catActivityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			catActivityAllColumns,
			catActivityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cat_activities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cat_activities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, catActivityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(catActivityType, catActivityMapping, append(wl, catActivityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cat_activities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cat_activities")
	}

	if !cached {
		catActivityUpdateCacheMut.Lock()
		catActivityUpdateCache[key] = cache
		catActivityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q catActivityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cat_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cat_activities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CatActivitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cat_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, catActivityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in catActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all catActivity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CatActivity) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cat_activities provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(catActivityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	catActivityUpsertCacheMut.RLock()
	cache, cached := catActivityUpsertCache[key]
	catActivityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			catActivityAllColumns,
			catActivityColumnsWithDefault,
			catActivityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			catActivityAllColumns,
			catActivityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cat_activities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(catActivityPrimaryKeyColumns))
			copy(conflict, catActivityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cat_activities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(catActivityType, catActivityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(catActivityType, catActivityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cat_activities")
	}

	if !cached {
		catActivityUpsertCacheMut.Lock()
		catActivityUpsertCache[key] = cache
		catActivityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CatActivity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CatActivity) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CatActivity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), catActivityPrimaryKeyMapping)
	sql := "DELETE FROM \"cat_activities\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cat_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cat_activities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q catActivityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no catActivityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cat_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cat_activities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CatActivitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(catActivityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cat_activities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, catActivityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from catActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cat_activities")
	}

	if len(catActivityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CatActivity) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCatActivity(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CatActivitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CatActivitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), catActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cat_activities\".* FROM \"cat_activities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, catActivityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CatActivitySlice")
	}

	*o = slice

	return nil
}

// CatActivityExists checks if the CatActivity row exists.
func CatActivityExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cat_activities\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cat_activities exists")
	}

	return exists, nil
}
